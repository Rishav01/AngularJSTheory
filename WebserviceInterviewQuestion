Source 1: http://www.journaldev.com/9193/web-services-interview-questions-soap-restful

    1. 
    2. What is a Web Service?
Web Services work on client-server model where client applications can access web services over the network. Web services provide endpoint URLs and expose methods that can be accessed over network through client programs written in java, shell script or any other different technologies.
Web services are stateless and doesn’t maintain user session like web applications.
    3. What are the advantages of Web Services?
Some of the advantages of web services are:
        ◦ Interoperability: Web services are accessible over network and runs on HTTP/SOAP protocol and uses XML/JSON to transport data, hence it can be developed in any programming language. Web service can be written in java programming and client can be PHP and vice versa.
        ◦ Reusability: One web service can be used by many client applications at the same time.
        ◦ Loose Coupling: Web services client code is totally independent with server code, so we have achieved loose coupling in our application.
        ◦ Easy to deploy and integrate, just like web applications.
        ◦ Multiple service versions can be running at same time.
    . What are different types of Web Services?
There are two types of web services:
        1. SOAP Web Services: Runs on SOAP protocol and uses XML technology for sending data.
        2. Restful Web Services: It’s an architectural style and runs on HTTP/HTTPS protocol almost all the time. REST is a stateless client-server architecture where web services are resources and can be identified by their URIs. Client applications can use HTTP GET/POST methods to invoke Restful web services.
    . What is SOAP?
SOAP stands for Simple Object Access Protocol. SOAP is an XML based industry standard protocol for designing and developing web services. Since it’s XML based, it’s platform and language independent. So our server can be based on JAVA and client can be on .NET, PHP etc. and vice versa.
    . What are advantages of SOAP Web Services?
SOAP web services have all the advantages that web services has, some of the additional advantages are:
        ◦ WSDL document provides contract and technical details of the web services for client applications without exposing the underlying implementation technologies.
        ◦ SOAP uses XML data for payload as well as contract, so it can be easily read by any technology.
        ◦ SOAP protocol is universally accepted, so it’s an industry standard approach with many easily available open source implementations.
    . What are disadvantages of SOAP Web Services?
Some of the disadvantages of SOAP protocol are:
        ◦ Only XML can be used, JSON and other lightweight formats are not supported.
        ◦ SOAP is based on the contract, so there is a tight coupling between client and server applications.
        ◦ SOAP is slow because payload is large for a simple string message, since it uses XML format.
        ◦ Anytime there is change in the server side contract, client stub classes need to be generated again.
        ◦ Can’t be tested easily in browser
    . What is WSDL?
WSDL stands for Web Service Description Language. WSDL is an XML based document that provides technical details about the web service. Some of the useful information in WSDL document are: method name, port types, service end point, binding, method parameters etc.
    . What are different components of WSDL?RRR
Some of the different tags in WSDL xml are:
        ◦ xsd:import namespace and schemaLocation: provides WSDL URL and unique namespace for web service.
        ◦ message: for method arguments
        ◦ part: for method argument name and type
        ◦ portType: service name, there can be multiple services in a wsdl document.
        ◦ operation: contains method name
        ◦ soap:address for endpoint URL.
    . What is UDDI?
UDDI is acronym for Universal Description, Discovery and Integration. UDDI is a directory of web services where client applications can lookup for web services. Web Services can register to the UDDI server and make them available to client applications.
    . What is difference between Top Down and Bottom Up approach in SOAP Web Services?RRR
In Top Down approach first WSDL document is created to establish the contract between web service and client and then code is written, it’s also termed as contract first approach. This is hard to implement because classes need to be written to confirm the contract established in WSDL. Benefit of this approach is that both client and server code can be written in parallel.
In Bottom Up approach, first web service code is written and then WSDL is generated. It’s also termed as contract last approach. This approach is easy to implement because WSDL is generated based on code. In this approach client code have to wait for WSDL from server side to start their work.
    . What is REST Web Services?
REST is the acronym for REpresentational State Transfer. REST is an architectural style for developing applications that can be accessed over the network. REST architectural style was brought in light by Roy Fielding in his doctoral thesis in 2000.
REST is a stateless client-server architecture where web services are resources and can be identified by their URIs. Client applications can use HTTP GET/POST methods to invoke Restful web services. REST doesn’t specify any specific protocol to use, but in almost all cases it’s used over HTTP/HTTPS. When compared to SOAP web services, these are lightweight and doesn’t follow any standard. We can use XML, JSON, text or any other type of data for request and response.
    . What are advantages of REST web services?
Some of the advantages of REST web services are:
        ◦ Learning curve is easy since it works on HTTP protocol
        ◦ Supports multiple technologies for data transfer such as text, xml, json, image etc.
        ◦ No contract defined between server and client, so loosely coupled implementation.
        ◦ REST is a lightweight protocol
        ◦ REST methods can be tested easily over browser.
    . What are disadvantages of REST web services?
Some of the disadvantages of REST are:
        ◦ Since there is no contract defined between service and client, it has to be communicated through other means such as documentation or emails.
        ◦ Since it works on HTTP, there can’t be asynchronous calls.
        ◦ Sessions can’t be maintained.
    . What is a Resource in Restful web services?
Resource is the fundamental concept of Restful architecture. A resource is an object with a type, relationship with other resources and methods that operate on it. Resources are identified with their URI, HTTP methods they support and request/response data type and format of data.
    . What are different HTTP Methods supported in Restful Web Services?RRR
Restful web services supported HTTP methods are – GET, POST, PUT, DELETE and HEAD.
    . Compare SOAP and REST web services?RRR
SOAP
REST
SOAP is a standard protocol for creating web services.
REST is an architectural style to create web services.
SOAP is acronym for Simple Object Access Protocol.
REST is acronym for REpresentational State Transfer.
SOAP uses WSDL to expose supported methods and technical details.
REST exposes methods through URIs, there are no technical details.
SOAP web services and client programs are bind with WSDL contract
REST doesn’t have any contract defined between server and client
SOAP web services and client are tightly coupled with contract.
REST web services are loosely coupled.
SOAP learning curve is hard, requires us to learn about WSDL generation, client stubs creation etc.
REST learning curve is simple, POJO classes can be generated easily and works on simple HTTP methods.
SOAP supports XML data format only
REST supports any data type such as XML, JSON, image etc.
SOAP web services are hard to maintain, any change in WSDL contract requires us to create client stubs again and then make changes to client code.
REST web services are easy to maintain when compared to SOAP, a new method can be added without any change at client side for existing resources.
SOAP web services can be tested through programs or software such as Soap UI.
REST can be easily tested through CURL command, Browsers and extensions such as Chrome Postman.
    . What are different ways to test web services?
SOAP web services can be tested programmatically by generating client stubs from WSDL or through software such as Soap UI.
REST web services can be tested easily with program, curl commands and through browser extensions. Resources supporting GET method can be tested with browser itself, without any program.
    . Can we maintain user session in web services?
Web services are stateless so we can’t maintain user sessions in web services.
    . What is difference between SOA and Web Services?RRR
Service Oriented Architecture (SOA) is an architectural pattern where applications are designed in terms of services that can be accessed through communication protocol over network. SOA is a design pattern and doesn’t go into implementation.
Web Services can be thought of as Services in SOAP architecture and providing means to implement SOA pattern.
    . What is the use of Accept and Content-Type Headers in HTTP Request?RRR
These are important headers in Restful web services. Accept headers tells web service what kind of response client is accepting, so if a web service is capable of sending response in XML and JSON format and client sends Accept header as “application/xml” then XML response will be sent. For Accept header “application/json”, server will send the JSON response.
Content-Type header is used to tell server what is the format of data being sent in the request. If Content-Type header is “application/xml” then server will try to parse it as XML data. This header is useful in HTTP Post and Put requests.
    . How would you choose between SOAP and REST web services?RRR
Web Services work on client-server model and when it comes to choose between SOAP and REST, it all depends on project requirements. Let’s look at some of the conditions affecting our choice:
        ◦ Do you know your web service clients beforehand? If Yes, then you can define a contract before implementation and SOAP seems better choice. But if you don’t then REST seems better choice because you can provide sample request/response and test cases easily for client applications to use later on.
        ◦ How much time you have? For quick implementation REST is the best choice. You can create web service easily, test it through browser/curl and get ready for your clients.
        ◦ What kind of data format are supported? If only XML then you can go with SOAP but if you think about supporting JSON also in future then go with REST.
    . What is JAX-WS API?
JAX-WS stands for Java API for XML Web Services. JAX-WS is XML based Java API to build web services server and client application. It’s part of standard Java API, so we don’t need to include anything else which working with it. Refer to JAX-WS Tutorial for a complete example.
    . Name some frameworks in Java to implement SOAP web services?RRR
We can create SOAP web services using JAX-WS API, however some of the other frameworks that can be used are Apache Axis and Apache CXF. Note that they are not implementations of JAX-WS API, they are totally different framework that work on Servlet model to expose your business logic classes as SOAP web services. Read more at Java SOAP Web Service Eclipse example.
    . Name important annotations used in JAX-WS API?
Some of the important annotations used in JAX-WS API are:
        ◦ @WebService
        ◦ @SOAPBinding
        ◦ @WebMethod
    . What is use of javax.xml.ws.Endpoint class?RRR
Endpoint class provides useful methods to create endpoint and publish existing implementation as web service. This comes handy in testing web services before making further changes to deploy it on actual server.
    . What is the difference between RPC Style and Document Style SOAP web Services?RRR
RPC style generate WSDL document based on the method name and it’s parameters. No type definitions are present in WSDL document.
Document style contains type and can be validated against predefined schema. Let’s look at these with a simple program. Below is a simple test program where I am using Endpoint to publish my simple SOAP web service.
TestService.java
package com.journaldev.jaxws.service;

import javax.jws.WebMethod;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.ws.Endpoint;

@WebService
@SOAPBinding(style = SOAPBinding.Style.RPC)
public class TestService {

	@WebMethod
	public String sayHello(String msg){
		return "Hello "+msg;
	}
	
	public static void main(String[] args){
		Endpoint.publish("http://localhost:8888/testWS", new TestService());
	}
}
When I run above program and then access the WSDL, it gives me below XML.
rpc.xml
<?xml version='1.0' encoding='UTF-8'?>
<!-- Published by JAX-WS RI (http://jax-ws.java.net). RI's version is JAX-WS RI 2.2.10 svn-revision#919b322c92f13ad085a933e8dd6dd35d4947364b. --><!-- Generated by JAX-WS RI (http://jax-ws.java.net). RI's version is JAX-WS RI 2.2.10 svn-revision#919b322c92f13ad085a933e8dd6dd35d4947364b. -->
<definitions xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsp1_2="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://service.jaxws.journaldev.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://service.jaxws.journaldev.com/" name="TestServiceService">
<types/>
<message name="sayHello">
<part name="arg0" type="xsd:string"/>
</message>
<message name="sayHelloResponse">
<part name="return" type="xsd:string"/>
</message>
<portType name="TestService">
<operation name="sayHello">
<input wsam:Action="http://service.jaxws.journaldev.com/TestService/sayHelloRequest" message="tns:sayHello"/>
<output wsam:Action="http://service.jaxws.journaldev.com/TestService/sayHelloResponse" message="tns:sayHelloResponse"/>
</operation>
</portType>
<binding name="TestServicePortBinding" type="tns:TestService">
<soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="rpc"/>
<operation name="sayHello">
<soap:operation soapAction=""/>
<input>
<soap:body use="literal" namespace="http://service.jaxws.journaldev.com/"/>
</input>
<output>
<soap:body use="literal" namespace="http://service.jaxws.journaldev.com/"/>
</output>
</operation>
</binding>
<service name="TestServiceService">
<port name="TestServicePort" binding="tns:TestServicePortBinding">
<soap:address location="http://localhost:8888/testWS"/>
</port>
</service>
</definitions>
Notice that types element is empty and we can’t validate it against any schema. Now just change the SOAPBinding.Style.RPC to SOAPBinding.Style.DOCUMENT and you will get below WSDL.
document.xml
<?xml version='1.0' encoding='UTF-8'?>
<!-- Published by JAX-WS RI (http://jax-ws.java.net). RI's version is JAX-WS RI 2.2.10 svn-revision#919b322c92f13ad085a933e8dd6dd35d4947364b. --><!-- Generated by JAX-WS RI (http://jax-ws.java.net). RI's version is JAX-WS RI 2.2.10 svn-revision#919b322c92f13ad085a933e8dd6dd35d4947364b. -->
<definitions xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsp1_2="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://service.jaxws.journaldev.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="http://service.jaxws.journaldev.com/" name="TestServiceService">
<types>
<xsd:schema>
<xsd:import namespace="http://service.jaxws.journaldev.com/" schemaLocation="http://localhost:8888/testWS?xsd=1"/>
</xsd:schema>
</types>
<message name="sayHello">
<part name="parameters" element="tns:sayHello"/>
</message>
<message name="sayHelloResponse">
<part name="parameters" element="tns:sayHelloResponse"/>
</message>
<portType name="TestService">
<operation name="sayHello">
<input wsam:Action="http://service.jaxws.journaldev.com/TestService/sayHelloRequest" message="tns:sayHello"/>
<output wsam:Action="http://service.jaxws.journaldev.com/TestService/sayHelloResponse" message="tns:sayHelloResponse"/>
</operation>
</portType>
<binding name="TestServicePortBinding" type="tns:TestService">
<soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
<operation name="sayHello">
<soap:operation soapAction=""/>
<input>
<soap:body use="literal"/>
</input>
<output>
<soap:body use="literal"/>
</output>
</operation>
</binding>
<service name="TestServiceService">
<port name="TestServicePort" binding="tns:TestServicePortBinding">
<soap:address location="http://localhost:8888/testWS"/>
</port>
</service>
</definitions>
Open schemaLocation URL in browser and you will get below XML.
schemaLocation.xml
<?xml version='1.0' encoding='UTF-8'?>
<!-- Published by JAX-WS RI (http://jax-ws.java.net). RI's version is JAX-WS RI 2.2.10 svn-revision#919b322c92f13ad085a933e8dd6dd35d4947364b. -->
<xs:schema xmlns:tns="http://service.jaxws.journaldev.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0" targetNamespace="http://service.jaxws.journaldev.com/">

<xs:element name="sayHello" type="tns:sayHello"/>

<xs:element name="sayHelloResponse" type="tns:sayHelloResponse"/>

<xs:complexType name="sayHello">
<xs:sequence>
<xs:element name="arg0" type="xs:string" minOccurs="0"/>
</xs:sequence>
</xs:complexType>

<xs:complexType name="sayHelloResponse">
<xs:sequence>
<xs:element name="return" type="xs:string" minOccurs="0"/>
</xs:sequence>
</xs:complexType>
</xs:schema>
So here WSDL document can be validated against the schema definintion.
    . How to get WSDL file of a SOAP web service?RRR
WSDL document can be accessed by appending ?wsdl to the SOAP endoint URL. In above example, we can access it at http://localhost:8888/testWS?wsdl location.
    . What is sun-jaxws.xml file?
This file is used to provide endpoints details when JAX-WS web services are deployed in servlet container such as Tomcat. This file is present in WEB-INF directory and contains endpoint name, implementation class and URL pattern. For example;
sun-jaxws.xml
<?xml version="1.0" encoding="UTF-8"?>
<endpoints xmlns="http://java.sun.com/xml/ns/jax-ws/ri/runtime" version="2.0">
  <endpoint
     name="PersonServiceImpl"
     implementation="com.journaldev.jaxws.service.PersonServiceImpl"
     url-pattern="/personWS"/>
</endpoints>
    . What is JAX-RS API?
Java API for RESTful Web Services (JAX-RS) is the Java API for creating REST web services. JAX-RS uses annotations to simplify the development and deployment of web services. JAX-RS is part of JDK, so you don’t need to include anything to use it’s annotations.
    . Name some implementations of JAX-RS API?RRR
There are two major implementations of JAX-RS API.
        1. Jersey: Jersey is the reference implementation provided by Sun. For using Jersey as our JAX-RS implementation, all we need to configure its servlet in web.xml and add required dependencies. Note that JAX-RS API is part of JDK not Jersey, so we have to add its dependency jars in our application.
        2. RESTEasy: RESTEasy is the JBoss project that provides JAX-RS implementation.
    . What is wsimport utility?RRR
We can use wsimport utility to generate the client stubs. This utility comes with standard installation of JDK. Below image shows an example execution of this utility for one of JAX-WS project.

    . Name important annotations used in JAX-RS API?
Some of the important JAX-RS annotations are:
        ◦ @Path: used to specify the relative path of class and methods. We can get the URI of a webservice by scanning the Path annotation value.
        ◦ @GET, @PUT, @POST, @DELETE and @HEAD: used to specify the HTTP request type for a method.
        ◦ @Produces, @Consumes: used to specify the request and response types.
        ◦ @PathParam: used to bind the method parameter to path value by parsing it.
    . What is the use of @XmlRootElement annotation?RRR
XmlRootElement annotation is used by JAXB to transform java object to XML and vice versa. So we have to annotate model classes with this annotation.
    . How to set different status code in HTTP response?RRR
For setting HTTP status code other than 200, we have to use javax.ws.rs.core.Response class for response. Below are some of the sample return statements showing it’s usage.
return Response.status(422).entity(exception).build();
return Response.ok(response).build(); //200
Source: https://www.javatpoint.com/web-services-interview-questions
There is given frequently asked Web Services interview questions and answers that has been asked in many companies. Let's see the list of top Web Services interview questions.
1) What is Web Service?
Web Service is a software system for communicating two devices over the network. More details...

2) How does a web service work?
A web service is used to communicate among various applications by using open standards such as HTML, XML, WSDL, and SOAP. You can build a Java-based web service on Solaris that is accessible from your Visual Basic program that runs on Windows. You can also use C# to build new web services on Windows that can be invoked from your web application that is based on JavaServer Pages (JSP) and runs on Linux.

3) What are the advantages of web services?
    • Interoperability: By the help of web services, an application can communicate with other application developed in any language.
    • Reusability: We can expose the web service so that other applications can use it.
    • Modularity: By the help of web service, we can create a service for a specific task such as tax calculation etc.
More details...

4) What are the different types of web services?
There are two types of web services:
    • SOAP
    • RESTful

5) What are the main features of web services?
Following is a list of main features of web services:
    • It is available over the Internet or private (intranet) networks.
    • It uses a standardized XML messaging system.
    • It is not tied to any one operating system or programming language.
    • It is self-describing via a common XML grammar.
    • It is discoverable via a simple find mechanism.

6) What is SOAP?
SOAP stands for Simple Object Access Protocol. It is a XML-based protocol for accessing web services. More details...

7) What are the advantages of SOAP web services?
    • WS Security
    • Language Independent
    • Platform Independent
More details...

8) What are the disadvantages of SOAP web services?
    • Slow
    • WSDL Dependent
More details...

9) What are the main features of SOAP?
The following list specifies the features of SOAP:
    • SOAP is a communication protocol.
    • SOAP is used for communication between applications.
    • SOAP is a format for sending messages.
    • SOAP is designed to communicate via Internet.
    • SOAP is platform independent.
    • SOAP is language independent.
    • SOAP is simple and extensible.
    • SOAP allows you to get around firewalls.
    • SOAP will be developed as a W3C standard.

10) What is WSDL?
WSDL stands for Web Services Description Language. It is a xml document containing information about web services such as method name, method parameter etc. More details...

11) What is UDDI?RRR
UDDI stands for Universal Description, Discovery and Integration. It is a XML based framework for describing, discovering and integrating web services. It contains a list of available web services. WSDL is the part of UDDI. More details...

12) What is RESTful web services?
REST stands for REpresentational State Transfer. It is a architectural style. It is not a protocol like SOAP. More details...

13) What are the advantages of RESTful web services?
    • Fast
    • Language Independent
    • Platform Independent
    • Can use SOAP.
    • Allows different data format.
More details...

12) What is the difference between SOAP and REST web services?
No.
SOAP
REST
1)
SOAP is a protocol.
REST is an architectural style.
2)
SOAP stands for Simple Object Access Protocol.
REST stands for REpresentational State Transfer.
3)
SOAP can't use REST because it is a protocol.
REST can use SOAP web services because it is a concept and can use any protocol like HTTP, SOAP.
4)
SOAP uses services interfaces to expose the business logic.
REST uses URI to expose business logic.
5)
SOAP defines standards to be strictly followed.
REST does not define too much standards like SOAP.
6)
SOAP permits XML data format only.
REST permits different data format such as Plain text, HTML, XML, JSON etc.
More details...

13) What is SOA?RRR
SOA stands for Service Oriented Architecture. It is a design pattern to provide services to other application through protocol. More details...

14) What tools are used to test web services?
    • SoapUI tool for testing SOAP and RESTful web services
    • Poster for firefox browser
    • Postman extension for Chrome

15) What is the advantage of XML in web service?RRR
In Web service, an XML is used to tag the data, format the data.

16) What is the usage of WSDL in a web service?
WSDL is used in web service to describe the availability of service.

17) What is Interoperability in Web services?
Web services facilitate various applications to communicate with each other and share data and services among themselves. Other applications can also use the web services. For example, a VB or .NET application can communicate with a Java web services and vice versa. Web services are used to make the application platform and technology independent.

18) Explain the loosely coupled architecture of web services.
A consumer of a web service is not tied to that web service directly. The web service interface can change over time without compromising the client's ability to interact with the service. A tightly coupled system implies that the client and server logic are closely tied to one another, implying that if one interface changes, the other must be updated. Adopting a loosely coupled architecture tends to make software systems more manageable and facilitates simpler integration between different systems.

19) What are the advantages of having XML based Web services?AAA
Using XML eliminates any networking, operating system, or platform binding. So Web Services based applications are highly interoperable application at their core level.

Well XML and JSON are the two most popularly used formats for exchanging data through web services. XML is good and relied format for years. However, slowly, JSOn is gaining popularity over JSON as the same amount of data in JSON is quite light weighted than XML. Also, the parsing JSON is comparatively easy than XML so it make easier to se the data received. Example, Twitter only supports JSON format exchange. 
20) What do you mean by synchronicity?RRR
Synchronicity is used to bind the client to the execution of the service. In synchronous invocations, the client blocks and waits for the service to complete its operation before continuing. On the other hand, synchronous operations facilitate a client to invoke a service and then execute other functions.

21) What is the usage of Service Transport Layer in Web service protocol stack?RRR
The Service Transport Layer is used to transport messages between applications.
This layer includes Hyper Text Transport Protocol (HTTP), Simple Mail Transfer Protocol (SMTP), File Transfer Protocol (FTP), and newer protocols like Blocks Extensible Exchange Protocol (BEEP).

22) What is the usage of Service Description layer in Web Service Protocol Stack?
The Service Description layer is used to describe the public interface to a specific web service. Currently, service description is handled via the Web Service Description Language (WSDL).

23) What is the usage of Service Discovery layer in Web Service Protocol Stack?RRR
The Service Discovery layer is used for centralizing services into a common registry and providing easy publish/find functionality.
Currently, service discovery is handled via Universal Description, Discovery, and Integration (UDDI).

Source 3: https://career.guru99.com/top-50-web-services-interview-questions/


1) Define Web Service?
A web service is a kind of software that is accessible on the Internet. It makes use of the XML messaging system and offers an easy to understand, interface for the end users.
2) What is new in this field for past few years?
The initiation of XML in this field is the advancement that provides web service a single language to communicate in between the RPCs, web services and their directories.
3) Give me an example of real web service?
One example of web services is IBM Web Services browser. You can get it from IBM Alphaworks site. This browser shows various demos related to web services. Basically web services can be used with the help of SOAP, WSDL, and UDDI . All these, provide a plug-and-play interface for using web services such as stock-quote service, a traffic-report service,  weather service etc.
4) How you define web service protocol stack?
It is basically set of various protocols that can be used to explore and execute web services. The entire stack has four layers i.e. Service Transport, XML Messaging, Service Description and Service Discovery.
5) Can you define each of these layers of protocol stack?
The Service Transport layer transfer messages between different applications, such as HTTP, SMTP, FTP, and Blocks Extensible Exchange Protocol (BEEP). The XML Messaging layer encodes messages in XML format so that messages can be understood at each end, such as XML-RPC and SOAP. The Service Description layer describes the user interface to a web service, such as WSDL. The Service Discovery layer centralizes services to a common registry and offer simple publish functionality, such as UDDI.
6) Define XML – RPC?
It is a protocol that makes use of XML messages to do Remote Procedure Calls.
7) Define SOAP?
SOAP is an XML based protocol to transfer between computers.


8) Define WSDL?
It means Web Services Description Language. It is basically the service description layer in the web service protocol stock. The Service Description layer describes the user interface to a web service.
9) What kind of security is needed for web services?

Web Services
The security level for web services should be more than that of what we say Secure Socket Layer (SSL). This level of security can be only achieved from Entrust Secure Transaction Platform. Web services need this level of security to ensure reliable transactions and secure confidential information .
10) Do you have any idea about foundation security services?
As implies from its name, these services are the foundation or basics of integration, authentication, authorization, digital signatures and encryption processes.
11) Define Entrust Identification Service?
Entrust Identification Service comes from the Entrust Security Transaction Platform. This platform allows companies to control the identities that are trusted to perform transactions for Web services transactions.
12) What UDDI means?
UDDI stands for Universal, Description, Discovery, and Integration. It is the discovery layer in the web services protocol stack.
13) Define Entrust Entitlements Service?
This service verifies entities that attempt to access a web service. For Example, the authentication service, the Entitlements Service ensures security in business operations.
14) Define Entrust Privacy Service?
As its name implies, it deals with security and confidentiality. This service encrypts data to ensure that only concerned parties can access the data.
15) What do you mean by PKI?
It means Public-Key Infrastructure.
16) What tools are used to test a web service?
I have used SoapUI for SOAP WS and Firefox poster plugin for RESTFul Services.
17) Differentiate between a SOA and a Web service?
SOA is a design and architecture to implement other services. SOA can be easily implemented using various protocols such as HTTP, HTTPS, JMS, SMTP, RMI, IIOP, RPC etc. While Web service, itself is an implemented technology. In fact one can implement SOA using the web service.
18) Discuss various approaches to develop SOAP based web service?
We can develop SOAP based web service with two different types of approaches such as contract-first and contract-last. In the first approach, the contract is defined first and then the classes are derived from the contract while in the later one, the classes are defined first and then the contract is derived from these classes.
19) If you have to choose one approach, then what will be your choice?
In my point of view, the first approach that is the contract-first approach is more feasible as compared to the second one but still it depends on other factors too.
20) Is there any special application required to access web service?
No, you don’t need to install any special application to access web service. You can access web service from any application that supports XML based object request and response.
21) Can you name few free and commercial implementations for web services?
The implementations I know are Apache SOAP, JAX-WS Reference Implementation, JAX-RS Reference Implementation, Metro, Apache CXF, MS.NET and Java 6.
22) Name browser that allows access to web service?
JavaScript XmlHttpRequest object is required to access web service via browsers. The browsers that support this object are Internet Explorer, Safari and Mozilla-based browsers like FireFox.
23) What is REST?
REST stands for Representational State Transfer. REST itself is not a standard, while it uses various standards such as HTTP, URL, XML/HTML/GIF/JPEG (Resource Representations) and text/xml, text/html, image/gif, image/jpeg, etc (MIME Types).
24) How one can provide API to users?
To provide an API to the users, one can easily do this with an “open table”. All you need to do is to write open table which is basically an XML schema that point to a web service.
25) Name the various communication channels in web service?
Web service is integrated with three protocols such as HTTP/POST, HTTP/GET, and SOAP. It provides three different communication channels to clients. Client can choose any communication method as per requirements.
26) How can you document web service?
Web services are contemplated as self-documenting because they provide entire information regarding the available methods and parameters used for XML based standard, known as WSDL. One can also provide more information to explain web services via their own WebService and WebMethod attributes.
27) What are the situations, when we need ASP.NET web services?
ASP.NET web services are used when one need to implement three tier architecture in a web service. It allows handy ways to use middle tier components through internet. The main advantage of .NET Web services is that they are capable enough to communicate across firewalls because they use SOAP as transport protocol.
28) What are distributed technologies?
The increasing ratio of distributed applications has raised demand for distributed technologies. It allows segmenting of application units and transferring them to different computers on different networks.
29) Differentiate between web services, CORBA and DCOM?
Web services transfer/receive messages to/from application respectively, via HTTP protocol. It uses XML to encode data.


CORBA and DCOM transfer/receive messages to/from application respectively, via non-standard protocols such as IIOP and RPC.
30) Can you tell few benefits of web services?
The biggest advantage of web service is that is supported by wide variety of platforms. Moreover, in near future, web services may spread its boundary and enhance new methods that will provide ease to clients. The enhancement will not affect the clients, even if they offer old methods and parameters.
31) Can you name some standards used in web services?
The standards used in web services are WSDL (used to create interface definition), SOAP (used to structure data), HTTP (communication channels), DISCO (used to create discovery documents) and UDDI (used to create business registries).
32) Explain in brief, what DISCO is?
DISCO means discovery. It groups the list of interrelated web services. The organization that provides web services, issues a DISCO file on its server and that file contains the links of all the provided web services. This standard is good when client knows the company already. Also it can be used within a local network as well.
33) Explain in brief, what UDDI is?
UDDI (Universal Description, Discovery, and Integration) provides consolidated directory for web services on the internet. Clients use UDDI to find web services as per their business needs. It basically hosts the web services from various companies. In order to share web services, you need to publish it in UDDI.
34) Explain the .NET web services supported data types? 
.Net web services uses XML-based standards to transfer/receive information. Thus, .NET web services can only works with data types known by XML schema standard. Like FileSteam, Eventlog etc. are not recognized by the XML schema standards and hence, not supported in web services.
35) How a .NET web service is tested?
ASP.NET uses a test page routinely, when one calls for the URL of .asmx file in any browser. This page shows complete information regarding web services.
36) How a .NET web service is consumed?
Since we know that web services are constructed on XML standards. Therefore, clients need to have complete understanding of XML-based messages to interchange messages. Clients can communicate with web services through .NET framework that offers proxy mechanisms. These proxy mechanisms have detailed information regarding data sharing within web services that can be easily used by the clients.
37) Can you name the two Microsoft solutions for distributed applications?
The two Microsoft solutions for distributed applications are .NET Web Services and .NET Remoting.
38) Differentiate between .NET Web Services and .NET Remoting?
As far as protocol is concerned, .NET Web Service uses HTTP, while, .NET Remoting uses any protocol i.e. TCP/HTTP/SMTP. When it comes to performance, .NET Remoting is comparatively, faster than.NET Web Service. Also, as .NET Web Services are hosted via IIS, therefore, it is far more reliable than the .NET Remoting.
39) Name the components to be published while deploying a Web Service?
The components that need to be published during a web service deployment are Web Application Directory, Webservice.asmx File, Webservice.Disco File, Web.Config File and Bin Directory.
40) What are the steps performed by the client to access a web service?
First of all a web reference to the web service is created by the client in his application. Then a proxy class is generated. After that an object of the proxy class is created and at last, the web service is accessed via that proxy object.
41) How web services are implemented in .NET?
To implement web services in .NET, HTTP handlers are used that interrupt requests to .asmx files.
42) Explain few disadvantages of Response Caching?
Response Caching is useless or incompetent when method accepts extensive amount of values because caching means to store lot of information.  Also, if the method depends on external source of information, and that are not provided within the parameters then such methods are bypassed.
43) What is the alternate solution to Response Caching?
One can use Data Caching (System.Web.Caching.Cach) instead of Response Caching.
44) Brief few drawbacks of using GET and POST methods to communicate with the web service?
These methods are less secure and inhibit users to pass structures and objects as arguments. Also, it doesn’t allow users to pass ByRef arguments.
45) How can one access a class as a web service?
To access a class as a web service, one should inherit the class from the System.Web.Services.WebService class and qualify the class with the WebService attribute.
46) How can one access the web service class method via internet?
To access web service class method via internet, one should qualify a method with the WebMethod attribute.
47) How a SOAP message is structured?
A SOAP message is consists of SOAP Envelope, SOAP Headers, and SOAP Body.
48) Can you name different kinds of web services?
There are two types of web services in total i.e. SOAP based web service and RESTful web service.
This question is already mentioned earlier.
49) What’s different in RESTful web services?
The RESTful web services contains no contract or WSDL file.
50) Give me few reasons to use RESTful web service?
The RESTFul web services are simple to implement and test. It supports various data formats such as XML, JSON etc.
51) Explain what is JAVA web services? What are the methods to create web services?
Java webservices is developed to build and deploy basic web service on JAVA platform.
To create a web services, there are two approaches that are adopted
    • Top-down approach
    • Top-up approach
52) Explain what is JAXP?
JAXP is a JAVA API for XML processing that enables application to write, read, manipulate and transform XML data.  Similarly, to perform other various function there are other Java API’s as well like JAX-RPC, JAXM, JAXR, JAXB, etc.
53) Mention the JAXB binding framework?
JAXB binding framework is available in three Java Packages
    • xml.bind: This package defines abstract classes and interfaces that are used directly with content classes
    • xml.bind.util: This package contains utility classes that may be availed by client applications to manage marshalling, unmarshalling and validation events
    • xml.bind.helper: This helper package gives partial implementations for some of the javax.xml.bind interfaces. These APIs are not to be directly used by applications using JAXB architecture
54) Give a simple example of how XML document can be Marshal and Unmarshal in JAVA framework?
Marshalling is the process of converting XML document into Java readable form while UnMarshalling is the reverse process of Marshalling.  Let see how Java unmarshals an XML document and then marshals it back
JAXBContext jc= JAXBContext.newInstance (“com.acme.foo”);
// unmarshal from foo.xml
Unmarshaller u = jc.createUnmarshaller () ;
FooObject fooObj=
(FooObject)u.unmarshal (new File (“foo.xml”) );
// marshal to sytem.out
Marshaller m = jc.createMarshaller ();
m.marshal (fooObj, System.out);
55) Explain what does Marshaller do if jaxb.encoding property is not declared?
By default, the Marshaller will use “UTF-8” if jaxb.encoding property is not declared.
56) Mention what are the types of validation can a JAXB client can perform?
There are two types of JAXB client validation that a JAXB can perform
    • Unmarshal Time Validation
    • On-Demand Validation
57) Mention what are the three ways to handle the event encountered during the marshal, unmarshal and validate operations?
    • Using the default event handler
    • Register and Implement a custom event handler
    • Use the ValidationEventCollector utility
58) Explain where does JAXB compiler is located?
JAXB schema binding compiler is placed in the <JWSDP_Home>/jaxb/bin directory.  In this directory, there are two scripts, xjc.sh (Solaris/Linux) and xjc.bat (Windows).
59) In what cases do you need to customize the default binding?
In some cases, you are required to customize the default binding like
    • Creating API documentation for the schema derived JAXB packages, classes, methods and constants
    • Giving semantically meaningful customized names for cases that the default XML name-to-Java identifier mapping cannot handle automatically
    • Overriding default binding- like specifying that a model group should be attached to a class rather than a list
60) Explain what is Inline Customization?
Customization to JAXB bindings made by means of inline binding declarations  in an XML schema file that take the form of <xsd:appinfo> elements embedded in schema <xsd:annotation>elements.
61) Explain what is XML signature?
XML can be used to sign any arbitrary data whether it is a binary or XML.  The data is recognized via URIs in one or more reference elements.  It is described in one or more forms, like detached, enveloping or enveloped.
62) Explain what is Stax?
Stax stands for Streaming API for XML; it is an API to read and write XML documents, originating from the JAVA programming language.
63) Mention what are the usual XML APIs?
The usual XML APIs includes
    • DOM based or Tree based APIs: The whole document is read into memory as a tree structure for random availability by calling application
    • Event based APIs: The application registers to get events as entities are encountered within the source document
64) Explain what is Push parsing and Pull parsing?
    • Pull Parsing: Streaming pull parsing is referred to a programming model in which a client application calls methods on an XML parsing library, when it needed to communicate with an XML infoset- which means the client will only gets XML data when it is asked for
    • Push Parsing: In Push Parsing, the parser pushes parsing events or XML data to the application.  In push model, the parser got the hold over the parsing  process and the parser calls the implemented handler methods.
65) Explain on which technology does XWS security is based on? List out the options that XWS security provides for securing JAX-RPC applications?
XWS security is based on securing web services build on JAX-RPC and on stand-alone application based on SAAJ.  For securing JAX-RPC application, options that XWS security provides are
    • XML digital signature
    • XML encryption
    • Username token verification
    • XWS security framework APIs
66) List out the six packages available in XML Digital signature API?
Digital signature API is
    • xml.crypto
    • xml.crypto.dsig
    • xml.crypto.dsig.keyinfo
    • xml.crypto.dsig.spec
    • xml.crypto.dom
    • xml.crypto.dsig.dom
67) Explain what is JAXR?
JAXR is the JAVA programming APIs for Java platform application to access and programmatically interact with various kinds of meta-data registries.
68) Explain what does the JAXR architecture consist of?
JAXR architecture is consists of a JAXR client and JAXR provider.
    • JAXR client: It is a client program which uses the JAXR API to use a registry through a JAXR provider
    • JAXR provider: It is an implementation of the JAXR API that provide access to a particular registry provider or to a class of registry providers that are built on a common speicifications.
69) Explain what is JAXM messaging models?
There are two types of messaging models for JAXM synchronous and asynchronous
    • Synchronous messaging model: In such type of model, client directly communicates with the source. In this, the client will send the request and waits.
    • Asynchronous messaging model: In this model, client directs the message to the messaging provider and returns back.  Messaging provider then executes the routing of the message to the end source.
70) Explain what is UDDI, DISCO and WSDL?
    • UDDI: It means Universal Description, Discovery and I It is the directory that is used to publish and discover public web services
    • DISCO: It is commonly known as discovery. It clubs common services together and exposes schemas document of the web services
    • WSDL: It stands for web service description language (WSDL). It is used to describe web services.  The description includes URL of web services, properties and methods supported by web services, data type it supports and protocol detail it supports
Webservices Quiz
Start
Refer our Web Service Tutorials for an extra edge in your interview.


 Download PDF

You Might Like:
Top 50 JQuery Interview Questions & Answers Top 50 XML Interview Questions & Answers 15 Rest API Interview Question & Answers Top 17 SOAP Web Services Interview Questions & Answers
0REPLIES
Leave a Comment
Top of Form

Name *  Email *  
Bottom of Form
Popular
Recent

